/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.river.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.river.model.rivers;
import com.river.model.riversModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the rivers service. Represents a row in the &quot;Sample_rivers&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link riversModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link riversImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see riversImpl
 * @see rivers
 * @see riversModel
 * @generated
 */
@ProviderType
public class riversModelImpl extends BaseModelImpl<rivers>
	implements riversModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rivers model instance should use the {@link rivers} interface instead.
	 */
	public static final String TABLE_NAME = "Sample_rivers";
	public static final Object[][] TABLE_COLUMNS = {
			{ "riverid", Types.INTEGER },
			{ "name", Types.VARCHAR },
			{ "url", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("riverid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table Sample_rivers (riverid INTEGER not null primary key,name VARCHAR(75) null,url VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Sample_rivers";
	public static final String ORDER_BY_JPQL = " ORDER BY rivers.riverid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Sample_rivers.riverid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.river.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.river.model.rivers"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.river.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.river.model.rivers"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.river.service.util.PropsUtil.get(
				"lock.expiration.time.com.river.model.rivers"));

	public riversModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _riverid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setRiverid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _riverid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return rivers.class;
	}

	@Override
	public String getModelClassName() {
		return rivers.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("riverid", getRiverid());
		attributes.put("name", getName());
		attributes.put("url", getUrl());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer riverid = (Integer)attributes.get("riverid");

		if (riverid != null) {
			setRiverid(riverid);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}
	}

	@Override
	public int getRiverid() {
		return _riverid;
	}

	@Override
	public void setRiverid(int riverid) {
		_riverid = riverid;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public rivers toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (rivers)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		riversImpl riversImpl = new riversImpl();

		riversImpl.setRiverid(getRiverid());
		riversImpl.setName(getName());
		riversImpl.setUrl(getUrl());

		riversImpl.resetOriginalValues();

		return riversImpl;
	}

	@Override
	public int compareTo(rivers rivers) {
		int primaryKey = rivers.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof rivers)) {
			return false;
		}

		rivers rivers = (rivers)obj;

		int primaryKey = rivers.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<rivers> toCacheModel() {
		riversCacheModel riversCacheModel = new riversCacheModel();

		riversCacheModel.riverid = getRiverid();

		riversCacheModel.name = getName();

		String name = riversCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			riversCacheModel.name = null;
		}

		riversCacheModel.url = getUrl();

		String url = riversCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			riversCacheModel.url = null;
		}

		return riversCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{riverid=");
		sb.append(getRiverid());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.river.model.rivers");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>riverid</column-name><column-value><![CDATA[");
		sb.append(getRiverid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = rivers.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			rivers.class
		};
	private int _riverid;
	private String _name;
	private String _url;
	private rivers _escapedModel;
}