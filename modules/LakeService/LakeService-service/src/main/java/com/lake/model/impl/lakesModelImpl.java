/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lake.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.lake.model.lakes;
import com.lake.model.lakesModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the lakes service. Represents a row in the &quot;sample_lakes&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link lakesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link lakesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see lakesImpl
 * @see lakes
 * @see lakesModel
 * @generated
 */
@ProviderType
public class lakesModelImpl extends BaseModelImpl<lakes> implements lakesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lakes model instance should use the {@link lakes} interface instead.
	 */
	public static final String TABLE_NAME = "sample_lakes";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lakeid", Types.INTEGER },
			{ "name", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "jan", Types.DOUBLE },
			{ "feb", Types.DOUBLE },
			{ "mar", Types.DOUBLE },
			{ "apr", Types.DOUBLE },
			{ "may", Types.DOUBLE },
			{ "june", Types.DOUBLE },
			{ "july", Types.DOUBLE },
			{ "aug", Types.DOUBLE },
			{ "sep", Types.DOUBLE },
			{ "oct", Types.DOUBLE },
			{ "nov", Types.DOUBLE },
			{ "dec_", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lakeid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jan", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("feb", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("mar", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("apr", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("may", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("june", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("july", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("aug", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("sep", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("oct", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("nov", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("dec_", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table sample_lakes (lakeid INTEGER not null primary key,name VARCHAR(75) null,url VARCHAR(75) null,jan DOUBLE,feb DOUBLE,mar DOUBLE,apr DOUBLE,may DOUBLE,june DOUBLE,july DOUBLE,aug DOUBLE,sep DOUBLE,oct DOUBLE,nov DOUBLE,dec_ DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table sample_lakes";
	public static final String ORDER_BY_JPQL = " ORDER BY lakes.lakeid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sample_lakes.lakeid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.lake.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.lake.model.lakes"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.lake.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.lake.model.lakes"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.lake.service.util.PropsUtil.get(
				"lock.expiration.time.com.lake.model.lakes"));

	public lakesModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _lakeid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setLakeid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lakeid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return lakes.class;
	}

	@Override
	public String getModelClassName() {
		return lakes.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lakeid", getLakeid());
		attributes.put("name", getName());
		attributes.put("url", getUrl());
		attributes.put("jan", getJan());
		attributes.put("feb", getFeb());
		attributes.put("mar", getMar());
		attributes.put("apr", getApr());
		attributes.put("may", getMay());
		attributes.put("june", getJune());
		attributes.put("july", getJuly());
		attributes.put("aug", getAug());
		attributes.put("sep", getSep());
		attributes.put("oct", getOct());
		attributes.put("nov", getNov());
		attributes.put("dec_", getDec_());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer lakeid = (Integer)attributes.get("lakeid");

		if (lakeid != null) {
			setLakeid(lakeid);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Double jan = (Double)attributes.get("jan");

		if (jan != null) {
			setJan(jan);
		}

		Double feb = (Double)attributes.get("feb");

		if (feb != null) {
			setFeb(feb);
		}

		Double mar = (Double)attributes.get("mar");

		if (mar != null) {
			setMar(mar);
		}

		Double apr = (Double)attributes.get("apr");

		if (apr != null) {
			setApr(apr);
		}

		Double may = (Double)attributes.get("may");

		if (may != null) {
			setMay(may);
		}

		Double june = (Double)attributes.get("june");

		if (june != null) {
			setJune(june);
		}

		Double july = (Double)attributes.get("july");

		if (july != null) {
			setJuly(july);
		}

		Double aug = (Double)attributes.get("aug");

		if (aug != null) {
			setAug(aug);
		}

		Double sep = (Double)attributes.get("sep");

		if (sep != null) {
			setSep(sep);
		}

		Double oct = (Double)attributes.get("oct");

		if (oct != null) {
			setOct(oct);
		}

		Double nov = (Double)attributes.get("nov");

		if (nov != null) {
			setNov(nov);
		}

		Double dec_ = (Double)attributes.get("dec_");

		if (dec_ != null) {
			setDec_(dec_);
		}
	}

	@Override
	public int getLakeid() {
		return _lakeid;
	}

	@Override
	public void setLakeid(int lakeid) {
		_lakeid = lakeid;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public double getJan() {
		return _jan;
	}

	@Override
	public void setJan(double jan) {
		_jan = jan;
	}

	@Override
	public double getFeb() {
		return _feb;
	}

	@Override
	public void setFeb(double feb) {
		_feb = feb;
	}

	@Override
	public double getMar() {
		return _mar;
	}

	@Override
	public void setMar(double mar) {
		_mar = mar;
	}

	@Override
	public double getApr() {
		return _apr;
	}

	@Override
	public void setApr(double apr) {
		_apr = apr;
	}

	@Override
	public double getMay() {
		return _may;
	}

	@Override
	public void setMay(double may) {
		_may = may;
	}

	@Override
	public double getJune() {
		return _june;
	}

	@Override
	public void setJune(double june) {
		_june = june;
	}

	@Override
	public double getJuly() {
		return _july;
	}

	@Override
	public void setJuly(double july) {
		_july = july;
	}

	@Override
	public double getAug() {
		return _aug;
	}

	@Override
	public void setAug(double aug) {
		_aug = aug;
	}

	@Override
	public double getSep() {
		return _sep;
	}

	@Override
	public void setSep(double sep) {
		_sep = sep;
	}

	@Override
	public double getOct() {
		return _oct;
	}

	@Override
	public void setOct(double oct) {
		_oct = oct;
	}

	@Override
	public double getNov() {
		return _nov;
	}

	@Override
	public void setNov(double nov) {
		_nov = nov;
	}

	@Override
	public double getDec_() {
		return _dec_;
	}

	@Override
	public void setDec_(double dec_) {
		_dec_ = dec_;
	}

	@Override
	public lakes toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (lakes)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		lakesImpl lakesImpl = new lakesImpl();

		lakesImpl.setLakeid(getLakeid());
		lakesImpl.setName(getName());
		lakesImpl.setUrl(getUrl());
		lakesImpl.setJan(getJan());
		lakesImpl.setFeb(getFeb());
		lakesImpl.setMar(getMar());
		lakesImpl.setApr(getApr());
		lakesImpl.setMay(getMay());
		lakesImpl.setJune(getJune());
		lakesImpl.setJuly(getJuly());
		lakesImpl.setAug(getAug());
		lakesImpl.setSep(getSep());
		lakesImpl.setOct(getOct());
		lakesImpl.setNov(getNov());
		lakesImpl.setDec_(getDec_());

		lakesImpl.resetOriginalValues();

		return lakesImpl;
	}

	@Override
	public int compareTo(lakes lakes) {
		int primaryKey = lakes.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof lakes)) {
			return false;
		}

		lakes lakes = (lakes)obj;

		int primaryKey = lakes.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<lakes> toCacheModel() {
		lakesCacheModel lakesCacheModel = new lakesCacheModel();

		lakesCacheModel.lakeid = getLakeid();

		lakesCacheModel.name = getName();

		String name = lakesCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			lakesCacheModel.name = null;
		}

		lakesCacheModel.url = getUrl();

		String url = lakesCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			lakesCacheModel.url = null;
		}

		lakesCacheModel.jan = getJan();

		lakesCacheModel.feb = getFeb();

		lakesCacheModel.mar = getMar();

		lakesCacheModel.apr = getApr();

		lakesCacheModel.may = getMay();

		lakesCacheModel.june = getJune();

		lakesCacheModel.july = getJuly();

		lakesCacheModel.aug = getAug();

		lakesCacheModel.sep = getSep();

		lakesCacheModel.oct = getOct();

		lakesCacheModel.nov = getNov();

		lakesCacheModel.dec_ = getDec_();

		return lakesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{lakeid=");
		sb.append(getLakeid());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", jan=");
		sb.append(getJan());
		sb.append(", feb=");
		sb.append(getFeb());
		sb.append(", mar=");
		sb.append(getMar());
		sb.append(", apr=");
		sb.append(getApr());
		sb.append(", may=");
		sb.append(getMay());
		sb.append(", june=");
		sb.append(getJune());
		sb.append(", july=");
		sb.append(getJuly());
		sb.append(", aug=");
		sb.append(getAug());
		sb.append(", sep=");
		sb.append(getSep());
		sb.append(", oct=");
		sb.append(getOct());
		sb.append(", nov=");
		sb.append(getNov());
		sb.append(", dec_=");
		sb.append(getDec_());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.lake.model.lakes");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lakeid</column-name><column-value><![CDATA[");
		sb.append(getLakeid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jan</column-name><column-value><![CDATA[");
		sb.append(getJan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feb</column-name><column-value><![CDATA[");
		sb.append(getFeb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mar</column-name><column-value><![CDATA[");
		sb.append(getMar());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>apr</column-name><column-value><![CDATA[");
		sb.append(getApr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>may</column-name><column-value><![CDATA[");
		sb.append(getMay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>june</column-name><column-value><![CDATA[");
		sb.append(getJune());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>july</column-name><column-value><![CDATA[");
		sb.append(getJuly());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aug</column-name><column-value><![CDATA[");
		sb.append(getAug());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sep</column-name><column-value><![CDATA[");
		sb.append(getSep());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oct</column-name><column-value><![CDATA[");
		sb.append(getOct());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nov</column-name><column-value><![CDATA[");
		sb.append(getNov());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dec_</column-name><column-value><![CDATA[");
		sb.append(getDec_());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = lakes.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			lakes.class
		};
	private int _lakeid;
	private String _name;
	private String _url;
	private double _jan;
	private double _feb;
	private double _mar;
	private double _apr;
	private double _may;
	private double _june;
	private double _july;
	private double _aug;
	private double _sep;
	private double _oct;
	private double _nov;
	private double _dec_;
	private lakes _escapedModel;
}